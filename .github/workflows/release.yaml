name: Release Process
on:
  issue_comment:
    types: [created]

jobs:
  release:
    name: Handle release command
    # Only run on PR comments from repository owners/admins
    if: |
      github.event.issue.pull_request &&
      startsWith(github.event.comment.body, '/release') &&
      (github.event.comment.author_association == 'OWNER' || github.event.comment.author_association == 'ADMIN')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Parse release command
        id: parse
        run: |
          COMMENT="${{ github.event.comment.body }}"
          if [[ $COMMENT =~ ^/release[[:space:]]+(major|minor|patch) ]]; then
            BUMP_TYPE="${BASH_REMATCH[1]}"
            echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
            echo "valid=true" >> $GITHUB_OUTPUT
          else
            echo "valid=false" >> $GITHUB_OUTPUT
          fi

      - name: React to comment
        if: steps.parse.outputs.valid == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: context.payload.comment.id,
              content: 'rocket'
            });

      - name: Add invalid command reaction
        if: steps.parse.outputs.valid == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: context.payload.comment.id,
              content: 'confused'
            });
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: '❌ Invalid release command. Usage: `/release [major|minor|patch]`'
            });

      - name: Exit if invalid
        if: steps.parse.outputs.valid == 'false'
        run: exit 1

      - name: Get PR details
        id: pr
        uses: actions/github-script@v7
        with:
          script: |
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });

            // Verify this is a dev -> master PR
            if (pr.data.base.ref !== 'master' || pr.data.head.ref !== 'dev') {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: '❌ Release command can only be used on pull requests from `dev` to `master`.'
              });
              core.setFailed('Not a dev -> master PR');
              return;
            }

            core.setOutput('head_sha', pr.data.head.sha);
            core.setOutput('base_ref', pr.data.base.ref);
            core.setOutput('head_ref', pr.data.head.ref);

      - uses: actions/checkout@v4
        with:
          ref: dev
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Bump version
        id: version
        run: |
          # Read current version
          CURRENT_VERSION=$(cat VERSION)
          echo "Current version: $CURRENT_VERSION"

          # Parse version components
          IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"

          # Increment based on bump type
          case "${{ steps.parse.outputs.bump_type }}" in
            major)
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            minor)
              minor=$((minor + 1))
              patch=0
              ;;
            patch)
              patch=$((patch + 1))
              ;;
          esac

          NEW_VERSION="$major.$minor.$patch"
          echo "New version: $NEW_VERSION"
          echo "$NEW_VERSION" > VERSION
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Commit version bump
        run: |
          git add VERSION
          git commit -m "Bump version to ${{ steps.version.outputs.new_version }}"
          git push origin dev

      - name: Merge dev into master
        run: |
          git checkout master
          git merge dev --no-ff -m "Release version ${{ steps.version.outputs.new_version }}"
          git push origin master

      - name: Create tag
        run: |
          git tag -a "v${{ steps.version.outputs.new_version }}" -m "Release version ${{ steps.version.outputs.new_version }}"
          git push origin "v${{ steps.version.outputs.new_version }}"

      - name: Create GitHub release
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: 'v${{ steps.version.outputs.new_version }}',
              name: 'Release v${{ steps.version.outputs.new_version }}',
              body: 'Release version ${{ steps.version.outputs.new_version }}',
              draft: false,
              prerelease: false
            });

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: '✅ Release v${{ steps.version.outputs.new_version }} completed successfully!\n\n- Version bumped from ' + '${{ steps.version.outputs.new_version }}' + '\n- Tag created: `v${{ steps.version.outputs.new_version }}`\n- GitHub release created'
            });
