name: Test the galaxy-k8s action
on:
  workflow_dispatch:
    inputs:
      manual-package-invocation:
        description: 'Package (y/n)?'
        required: true
        default: 'y'
      branch-name:
        description: 'Branch name to package'
        required: true
        default: 'master'
jobs:
  install-galaxy:
    uses: ksuderman/github-action-galaxy-k8s/.github/workflows/test-action.yaml@master
    with:
      api-key: secret

  create-galaxy-user:
    name: Create a Galaxy user
    runs-on: ubuntu-latest
    needs: [ install-galaxy ]
    steps:
      - uses: actions/checkout@v4
        with:
           persist-credentials: false

#      - uses: ksuderman/github-action-galaxy-k8s/.github/workflows/test-action.yaml@master
#        with:
#          api-key: secret
#          values_file: values.yml
#            configs:
#              galaxy.yml:
#                galaxy:
#                  admin_users: admin@example.org
#                  require_login: false
#                  show_welcome_with_login: true
#                  allow_user_creation: true

      - name: Create a Galaxy user
        run: |
          echo "Creating a Galaxy user"
          cat > /tmp/user.json << EOF
          {
            "username": "admin",
            "email": "admin@example.org",
            "password": "password"
          }
          EOF
          curl -X POST -H "x-api-key: secret" -H "Content-Type: application/json" -d @/tmp/user.json http://localhost:8080/api/users
          

#  tag-and-release:
#    name: Create a tag and GitHub release for this version.
#    runs-on: ubuntu-latest
#    env:
#      GH_TOKEN: ${{ github.token }}
#    steps:
#      - uses: actions/checkout@v4
#        with:
#           persist-credentials: false
#      - name: Tag and release
#        run: |
#          git config user.name "GitHub Actions Bot"
#          git config user.email "<>"
#          version=v$(cat VERSION)
#          git tag -a $version -m "Automatic release of $version"
#          git push origin $version
#          gh release create $version --generate-notes --latest
